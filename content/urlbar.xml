<?xml version="1.0" encoding="UTF-8"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   -
   - The Initial Developer of the Original Code is
   - Harutyun Amirjanyan <amirjanyan@gmail.com>.
   - Portions created by the Initial Developer are Copyright (C) 2010
   - the Initial Developer. All Rights Reserved.
   -
   - ***** END LICENSE BLOCK ***** -->

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">
	<binding id="urlbar" extends="chrome://browser/content/urlbarBindings.xml#urlbar" inheritstyle ="true">

<content sizetopopup="pref">
	<xul:hbox class="autocomplete-textbox-container urlbar-textbox-container" flex="1">
		<children includes="image|deck|stack|box">
			<xul:image class="autocomplete-icon" allowevents="true" />
		</children>
		<xul:stack flex="1" anonid="stack" class="urlbar-stack1" context=''>
			<children includes="progressmeter" />
			<xul:hbox flex="1">
				<xul:hbox flex="1" class="st-layers">
					<xul:hbox flex="1" anonid="textbox-input-box"
								class="textbox-input-box plain urlbar-input-box">
						<html:input anonid="input" style="cursor:inherit" flex="1" allowevents="true"
								class=" autocomplete-textbox textbox-input smart-text-input uri-element-right-align"
								xbl:inherits="tooltiptext=inputtooltiptext,onfocus,onblur,value,type,maxlength,disabled,size,readonly,userAction"
						/>
						<xul:hbox anonid="stsegment-layer" class="smart-text" style="display:none;" 
											ondragover="gURLBar.selectionManager.makePlain()"
											ondragexit="nsDragAndDrop.dragExit(event, gURLBar);" />
					</xul:hbox>
					<xul:box anonid="overflow-ellipsis" class="smart-text-ellipsis"
								onclick="gURLBar.inputclicks.elipsisClick(event);"
								style="-moz-user-select:none;-moz-box-align:center">
						<html:div>...</html:div>
					</xul:box>
				</xul:hbox>
			</xul:hbox>
		</xul:stack>
		<children includes="hbox" />
	</xul:hbox>
	<xul:dropmarker anonid="historydropmarker" class="autocomplete-history-dropmarker urlbar-history-dropmarker"
									allowevents="true" xbl:inherits="open,enablehistory" />
	<children/>
	<xul:popupset anonid="popupset" class="autocomplete-result-popupset" />
</content>


<implementation implements=" nsIObserver">
    <constructor><![CDATA[  //nsIDOMEventListener,
		var inputField = this.parentNode
		if (inputField.stMouseDown)
			inputField.removeEventListener('mousedown',inputField.stMouseDown,true)
		inputField.addEventListener('mousedown', inputField.stMouseDown = this.fixGURLBarPaddingClick, true)

		this.__noSuchMethod__=dump
		this.selectionManager.init()
		this.inputclicks.init()
		this.selectionManager.init()
		this.clickSelectsAll=false

		if(this.selectionManager.synch(this.inputField.value))
			this.selectionManager.makePretty()
        this.inputField.removeEventListener("mousemove", this, false);
        this.plain = false;
		// fix popup behaviour
		this.popup.__proto__.onPopupClick = this.popupClick
    ]]></constructor>
	<destructor><![CDATA[
        //
    ]]></destructor>

		<field name="inputBox">
			document.getAnonymousElementByAttribute(this, "anonid", "textbox-input-box");
		</field>
		<field name="inputBoxInner">
			document.getAnonymousElementByAttribute(this, "anonid", "textbox-input-box-inner");
		</field>
		<field name="stsegmentLayer">
			document.getAnonymousElementByAttribute(this, "anonid", "stsegment-layer");
		</field>
		<field name="_focused"/>


    <property name="contentIsCropped" onget="return false;" onset="return false;"/>

    <property name="value"  
	        onget="return this.hasAttribute('actiontype')?this._value:this.inputField.value;">
        <setter><![CDATA[
			val = this.onBeforeValueSet(val);
			try{
				val = val.replace(/%../g, function(s){try{return decodeURIComponent(s)}catch(e){return s}});
			}catch(e){}

			this.mIgnoreInput = true;
			this.inputField.value = val;
			this.mIgnoreInput = false;
			if(!this._focused){
				this.selectionManager.synch(val)
				if(this.plain)
					this.selectionManager.makePretty()
			}
			/*var event = document.createEvent("Events");
			event.initEvent("ValueChange", true, true);
			this.inputField.dispatchEvent(event);*/
			return val;
        ]]></setter>
      </property>

	  <method name="_updateVisibleText">
        <body><![CDATA[ ]]></body>
      </method>

	  <method name="handleEvent">
        <parameter name="aEvent"/>
        <body><![CDATA[
          /*switch(aEvent.type){
            case "mousedown":
              break;
            case "mousemove":
              this._initURLTooltip();
              break;
            case "mouseout":
              this._hideURLTooltip();
              break;
          }*/
        ]]></body>
      </method>

	  <method name="_getSelectedValueForClipboard">
         <body><![CDATA[
           // Grab the actual input field's value, not our value, which could include moz-action:
           var inputVal = this.inputField.value;
           var val = inputVal.substring(this.selectionStart, this.selectionEnd);
           return val;
         ]]></body>
       </method>
<method name="popupClick"><parameter name="aEvent"/><body><![CDATA[
//  gURLBar.popup.__proto__.onPopupClick = function onPopupClick(aEvent) {
	if (aEvent.button == 2) {
		return;
	}
	var sel=getSelection(), val = sel.toString()
	if(val){
		Cc["@mozilla.org/widget/clipboardhelper;1"]
					  .getService(Ci.nsIClipboardHelper)
					  .copyString(val);
		sel.removeAllRanges()
		return
	}
	var controller = this.view.QueryInterface(Components.interfaces.nsIAutoCompleteController);
	if (aEvent.button == 0 &&
		!aEvent.shiftKey &&
		!aEvent.ctrlKey && !aEvent.altKey && !aEvent.metaKey) {
		controller.handleEnter(true);
		return;
	}
	if (gURLBar && this.mInput == gURLBar) {
		var url = controller.getValueAt(this.selectedIndex);
		//this.closePopup();//controller.handleEscape();
		let action = this.mInput._parseActionUrl(url);
		if (action) {
			if (action.type == "switchtab") {
				url = action.param;
			} else {
				return;
			}
		}
		//openLinkIn(url, whereToOpenLink(aEvent, false, true), {relatedToCurrent: true, fromChrome: false});
		gBrowser.loadOneTab(url, {inBackground: true, relatedToCurrent: true});
	}
]]></body></method>
<method name="fixGURLBarPaddingClick"><parameter name="event"/><body><![CDATA[
	//needed to allow clicks on padding
	if (!gURLBar.fixPaddingClick_timeOut && (
		event.originalTarget==gURLBar || 
		(event.originalTarget == gURLBar.parentNode && event.button == 2)
	)) {
		var r=gURLBar.stsegmentLayer.getBoundingClientRect()
		if(r.left<event.clientX && event.clientX<r.right){
			event.preventDefault()
			event.stopPropagation()
			var utils = (window.getInterface ||
					window.QueryInterface(Ci.nsIInterfaceRequestor).getInterface)(Ci.nsIDOMWindowUtils)

			gURLBar.selectionManager.fixGURLBarPaddingClick=true
			this.fixPaddingClick_timeOut = true;
			setTimeout('gURLBar.fixPaddingClick_timeOut=null', 10) 
			var args=[event.type, event.clientX, r.top+2, event.button, event.clickCount, null]
			utils.sendMouseEventToWindow.apply(utils, args)
		}
	}
]]></body></method>

<field name="selectionManager"><![CDATA[({
	elemCount:0,
	tokenList:[],
	setInnerHTML: function(tokenList){
		this.currentTokenList = tokenList || this.tokenList
		var div = document.createElementNS('http://www.w3.org/1999/xhtml','div')
		div.className = 'smart-text-inner'
		var html = []
		this.currentTokenList.forEach(function(x){
			html.push(
				'<stsegment class="', x.class, '" index="', x.index, '">',
					x.text.replace(/[<&]/g, function(str) {return str == "&" ? "&amp;" : "&lt;";}),
				'</stsegment>'
			)
		})
		div.innerHTML = html.join('')
		var el=this.stsegmentLayer
		while (el.hasChildNodes())
			el.removeChild(el.lastChild);
		el.appendChild(div)
	},

	getMarkedTokenList: function(st, en){
		function sub(pt, sel, a, b){
			if(!pt) return
			var fr = pt.text.substring(a,b)
			var clazz = pt.class + ' marked'

			if(!fr) return
			if(sel) clazz += ' selected'
			if(a) clazz += ' first'
			if(b < pt.text.length) clazz += ' last'

			newList.push({
				text: fr,
				index: pt.index,
				class: clazz,
				startPos: pt.startPos + (a||0)
			})
		}
		var newList = [], i=0, pt = this.tokenList[i], lastPos=0, st1, en1
		//normalize marker
		if (st > en){
			st1=st; st=en; en=st1
		} else if(st == en)
			return this.tokenList

		//before marker start
		while(pt && pt.endPos <= st){
			sub(pt, false)
			lastPos = pt.endPos
			pt = this.tokenList[++i]
		}

		//split first marked node
		st1=st-lastPos
		en1=en-lastPos
		sub(pt, false, 0, st1)
		if(en<=pt.endPos){
			sub(pt, true, st1, en1)
			sub(pt, false, en1)
		} else {
			sub(pt, true, st1)
			//next token
			lastPos = pt.endPos
			pt = this.tokenList[++i]
			while(pt && pt.endPos <= en){
				sub(pt, true)
				lastPos=pt.endPos
				pt = this.tokenList[++i]
			}
			sub(pt, true, 0, en-lastPos)
			sub(pt, false, en-lastPos)
		}

		//after marker end
		while(pt = this.tokenList[++i])
			sub(pt, false)

		return newList;
	},

	createElem: function(className,is,ip){
		if(ip<=is)
			return
		var text = this.url.substring(is,ip)
		if(!text)
			return
		if(className=="subdomain"&&text=='www.')
			className+=' www'
		else if(className=="protocol"&&text=='http://')
			className+=' www'
		this.tokenList.push({
			index: this.elemCount,
			text: text,
			class: className,
			endPos: ip,
			startPos: is
		})
		this.elemCount++;
		this.inds.push(ip)
	},

	clear : function(){
		this.elemCount=0
		this.tokenList=[]
	},

	setURL: function(uri,url){
		this.clear();
		this.url=url;
		var i1
	//???????
		/*url = losslessDecodeURI(url);*/
	//create protocol node
		this.inds=[0]
		var i1= url.indexOf(":")+1
		while(url[i1]=='/') ++i1
		this.createElem("protocol",0,i1);
	//look for subdomain
		var host = uri.host, is=i1;
		if (host) {
			try {
				let baseDomain = Services.eTLD.getBaseDomainFromHost(host);
				let l=host.lastIndexOf(baseDomain)//punicode hosts
				if(l==-1){
					let i = baseDomain.split('.').length
					l=host.length
					while(i--)
						l=host.lastIndexOf('.',l-1)
					l++
				}
				is+=l
			} catch (e) {}
		}
	//look for domain
		var i2= (url.match(/(:\/(?!\/))|([^:\/](\/))|(.\?)/)||{index:-2}).index+1//.indexOf("/", uri.scheme=='file'?i1+1:i1)
		if(i2<0)
			  i2=url.length	;
	//create and fill subdomains
		//this.createElem("subdomain",i1,is);
		var ip1=ip2=i1;
		while(ip2<is){
			ip1=ip2;
			ip2 = url.indexOf(".",ip1+1)+1;
			if(ip2<0||ip2>=is)
				break;
			this.createElem("subdomain",ip1,ip2);
		}
		this.createElem("subdomain",ip1,is);
	//create and fill domain
		this.createElem("basedomain",is,i2);
		this.domainEnd=i2
	//look for query
		var i3= url.indexOf("?",i2+1)
		if(i3<0){
			i3= url.indexOf("#",i2+1)
			if(i3<0)
				i3=url.length
		}
	//fill path
		var ip1=ip2=i2;
		while(ip2<i3){
			ip1=ip2;
			ip2 = url.indexOf("/",ip1+1);
			if(ip2<0||ip2>=i3)
				break;
			this.createElem("path",ip1,ip2);
		}
		this.createElem("path",ip1,i3);
	//look for index
		var i4= url.indexOf("#",i3+1)
		if(i4<0)
			i4=url.length
	//fill querry
		var ip1=ip2=i3;
		while(ip2<i4){
			ip1=ip2;
			ip2 = url.indexOf("&",ip1+1);
			if(ip2<0||ip2>=i4)
				break;
			this.createElem("querry",ip1,ip2);
		}
		this.createElem("querry",ip1,i4);
	//create index element
		if(i4>i3){
			this.createElem("index",i4,url.length);
		}

		this.setInnerHTML()
	//keep scrolled element visible
		var pn=this.stsegmentLayer
		if(gURLBar.selectionManager.scrollLeft+pn.clientWidth > pn.scrollWidth)
			gURLBar.selectionManager.scrollLeft = pn.scrollWidth
		this.linkable=true
	},
	setSimpleValue: function(url){
		this.inds=[0];
		this.clear();
		this.url = url || gURLBar.getAttribute('placeholder')
		this.createElem("empty", 0, this.url.length);

		this.setInnerHTML()
	//keep scrolled element visible
		var pn = this.stsegmentLayer
		if (gURLBar.selectionManager.scrollLeft+pn.clientWidth > pn.scrollWidth)
			gURLBar.selectionManager.scrollLeft = pn.scrollWidth
		this.linkable=false
	},

	inputField: this.inputField,

	init: function(){
		this.inputField.addEventListener("DOMMouseScroll", function(e){
			if(e.ctrlKey){
				if(this.scroll){
					this.scroll=false
					var text=this.value,offset=e.rangeOffset,st=this.selectionStart,en=this.selectionEnd
					this.value=gURLBar.selectionManager.scrollNumbers(text,offset,(e.detail>0?-1:1))
					this.selectionStart=st;this.selectionEnd=en
				}else
					this.scroll=true
				e.preventDefault();e.stopPropagation()

			}else
				this.editor.rootElement.scrollLeft+=(e.detail>0?1:-1)*15
		}, true);

		this.stsegmentLayer.parentNode.addEventListener("DOMMouseScroll", function(e){
			if(e.ctrlKey){
				if(this.scroll){
					this.scroll=false
					gURLBar.selectionManager.scrollNumbersPretty(e)
				}else
					this.scroll=true
				e.preventDefault();e.stopPropagation()
			}else{
				gURLBar.selectionManager.scrollLeft+=(e.detail>0?1:-1)*15
			}
		}, true);

		
		this.stsegmentLayer.addEventListener("mousedown", this.onMouseDown.bind(this), true);		
		this.containerElement.addEventListener("mousemove", this, false)
	},

	scrollNumbers: function(text,offset,amount){
		var m=parseInt(text.charAt(offset))
		if(isNaN(m))
			m=parseInt(text.charAt(++offset))
		if(isNaN(m))
			m=parseInt(text.charAt(offset-=2))
		if(isNaN(m))
			return
		var len=1,max=10,m1
		m=m+amount
		while(m>=max){
			++len;--offset;
			m1=parseInt(text.charAt(offset))
			if(isNaN(m1)){
				len--;offset++;break;
			}
			m=max*m1+m
			max=10*max
		}
		while(m<0){
			++len;--offset;
			m1=parseInt(text.charAt(offset))
			if(isNaN(m1)){
				len--;offset++;break;
			}
			m=max*m1+m
			max=10*max
		}
		if(m<0)m=0
		return text.substring(0,offset)+m+text.substr(offset+len)
	},
	scrollNumbersPretty: function(e){
		var text=e.rangeParent.nodeValue,offset=e.rangeOffset,amount=e.detail>0?-1:1
		if(!text)
			return;

		var newtext=this.scrollNumbers(text,offset,amount)
		e.rangeParent.nodeValue=newtext
		var len=newtext.length-text.length
		var index=parseInt(e.rangeParent.parentNode.getAttribute('index'))
		var inds=this.inds
		text=this.inputField.value
		text=text.substring(0,inds[index])+newtext+text.substr(inds[index+1])
		this.url=this.inputField.value=text
		this.tokenList[index].text = text
		this.tokenList[index].endPos += len

		if(len!=0){
			for(var i=index+1;i<inds.length;i++){
				inds[i]+=len
				this.tokenList[index].endPos += len
			}
		}
	},

	selectFromElement: function(el){
		var st, en ;
		var ind = this.inds
		var i = parseInt(el.getAttribute('index'))

		if(i===ind.length-1){
			st=0;en=ind[i-1]
		}else if(i===ind.length){
			st=en=ind[i-1]
		}else if(i===0){
			st=ind[i];en=ind[i+1]-3
		}else{
			st=ind[i];en=ind[i+1]
		}
		this.moveSelectionToInputField(st, en);
	},

	getProtocolSuggestionHTML:function(){
		var getAboutUrls=function(){
			var l="@mozilla.org/network/protocol/about;1?what=", ans=[];
			for(var i in Cc)
				if(i.indexOf(l)==0){
					ans.push('about:'+ i.substr(l.length))
				}
			return ans.sort()
		}
		var decode = function(url){
			try{
				return decodeURIComponent(url)
			}catch(e){
				return url.replace(/%../g, function(s){try{return decodeURIComponent(s)}catch(e){return s}})
			}
		}

		var urlList=getAboutUrls()
		urlList.unshift.apply(urlList, urlList.splice(urlList.indexOf('about:config'),1))//move about:config to top

		for(var i=urlList.length; i--; )
			urlList[i]={href:urlList[i], name:urlList[i]}

		//******************
		urlList.unshift({href:'chrome://browser/content/places/places.xul',name: 'places'})
		urlList.push({href:'chrome://browser/content/browser.xul',name: ':)'})

		//****************** view-source
		var url = this.url
		//------------
		urlList.unshift({href: 'view-source:', name: 'view-source:', action: 'toggle'})
		urlList.unshift({href: 'edit:', name: 'edit:', action: 'toggle'})
		
		//------------
		/*var protocol = 'http', i = protocol.length
		if(url.substring(0, i)==protocol){
			if(url[i]='s')
				urlList.unshift({href: 'http'+url.substr(i+1), name: protocol})
			else
				urlList.unshift({href: 'https'+url.substr(i+1), name: 'https'})
		}*/
		//------------

		//****** chrome, file, resource
		try{
			var uri = makeURI(url), file;

			if(uri.schemeIs('resource')){//about?
				var ph=Services.io.getProtocolHandler('resource').QueryInterface(Ci.nsIResProtocolHandler)
				var abspath=ph.getSubstitution(uri.host)
				uri=Services.io.newURI(uri.path.substr(1), null, abspath)
			}
			while(uri.schemeIs('chrome'))
				uri=Cc["@mozilla.org/chrome/chrome-registry;1"].getService(Ci.nsIXULChromeRegistry).convertChromeURL(uri)

			if(uri.schemeIs('file')){
				file=uri.QueryInterface(Ci.nsIFileURL).file
				urlList.unshift({href: file.path, name:'filePath', action: 'setValue'})
				if(file.leafName.match(/\.(jar|zip|docx|xlsx|xpi|crx|oex)$/))
					urlList.unshift({href: 'jar:'+uri.spec+'!/', name:'jar:'})
			}else if(uri.schemeIs('jar')&&decode(uri.spec)!=decode(url)){
				urlList.unshift({href: decode(uri.spec), name:'jarPath', action: 'setValue'})
			}
		}catch(e){}

		var decoded=decode(this.url)
		if(decoded!=this.url)
			urlList.unshift({href: decoded, name:'decode', setValue: true})


		//******************
		var im=[]
		var odd = false
		for(var i=urlList.length; i--; ){
			var toc = urlList[i]
			im.unshift(
				'<stlink href="', toc.href.replace(/[<&"]/g, function(str) {return str == "&" ? "&amp;" : str =="<"? "&lt;":"&quote;"}), '"',
						toc.action?" action='"+ toc.action+"'":'',
						odd = !odd? " odd='true'":'', '>',
					toc.name,
				'</stlink>'
			)
		}
		return im
	},
	showProtocolSuggestions: function(anchorElement){
		var el =  document.getAnonymousElementByAttribute(gURLBar, "anonid", "contextPopup"),
			fc = document.createElementNS('http://www.w3.org/1999/xhtml','div')
		if(!el){
			el=document.createElement('panel')
			el.className='stPopup'
			el.setAttribute("anonid", "contextPopup")
			//el.setAttribute("type", "autocomplete-richlistbox")
			//el.setAttribute("ignorekeys", "true")
			this.stsegmentLayer.parentNode.appendChild(el)
			el.setAttribute('onclick','gURLBar.selectionManager.onProtocolPopupClick(event)')
			el.setAttribute('onkeypress','dump(event)')


		}else if(el.state=='open'){
			el.hidePopup()
		}else{
			while (el.hasChildNodes())
				el.removeChild(el.lastChild);
		}

		fc.innerHTML=this.getProtocolSuggestionHTML().join('')

		el.appendChild(fc);

		var popupBoxObject = el.popupBoxObject;
		popupBoxObject.setConsumeRollupEvent(popupBoxObject.ROLLUP_NO_CONSUME);
		/*el.showPopup(anchorElement, -1, -1, "popup", "bottomleft", "topleft");*/
		var r = anchorElement.getBoundingClientRect()
		el.openPopup(null, "after_start", r.left-50,r.bottom)
		el.focus()
	},
	onProtocolPopupClick:function(e){
		var el = e.originalTarget
		var url = el.getAttribute('href')
		var action = el.getAttribute('action')
		
		if(action=='setValue') {
			gURLBar.value = url;
			return
		}

		if(action=='toggle') {
			var protocol = url, i = protocol.length
			url = gURLBar.value
			if(url.substring(0, i)==protocol){
				url = url.substr(url[i]=='#'?i+1:i)
			}else
				url = protocol+url			 
		}	
		
		this.openUri(e, url)
	},

	hrefFromElement: function (el) {
		var url = el.getAttribute('href')		
		if(url)return url

		var i = el.getAttribute('index')
		if(!i)return

		i = parseInt(i);
		url= this.url

		var st, en, ind = this.inds;
		if(i>=ind.length-1){
			st=0;en=ind[i-1]
		}else {
			st=ind[i];en=ind[i+1]
		}
		if(el.classList.contains("subdomain")){
			var newURL = url.substring(0, ind[0])+url.substring(ind[i+1], this.domainEnd)
		}else
			var newURL =  url.substring(0, en)
		//fixup jars
		if(newURL.substring(0,4)=='jar:'){
			if(newURL[newURL.length-1]=='!')
				newURL = newURL+'/'
			else if(newURL.indexOf('!')==-1)
				newURL = newURL.substr(4)
		}

		return newURL
	},

	selectFromRange: function () {
		var st = this.anchorOffset
		var en = this.focusOffset
		if(st>en){
			var st1 = st
			st=en
			en=st1
		}else if(st==en){//
			gURLBar.inputclicks.incrementClickCounter()
		}
		this.moveSelectionToInputField(st, en);
	},

	openUri: function(event, href){
		href=href||this.hrefFromElement(event.originalTarget)
		if(!href)
			return
		var where = whereToOpenLink(event, false, true);
		if (where == "current")
			gURLBar.value=href;
		openLinkIn(href, where,{relatedToCurrent:true,fromChrome : false})
		event.stopPropagation();
		event.preventDefault();
	},

	moveSelectionToInputField: function(start,end){
		gURLBar.selectionManager.makePlain();
		this.inputField.focus();

		if(typeof start!=="number"||typeof end!=="number")
			this.inputField.select()
		else this.inputField.setSelectionRange(start,end)
	},

	onMouseUp: function(e, cursorMode){
		if(this.fixGURLBarPaddingClick){
 			this.fixGURLBarPaddingClick=false
		}
		if(e.button==2){
			if(this.anchorOffset!= this.focusOffset)
				this.selectFromRange()
			else
				this.moveSelectionToInputField();
			setTimeout(function()document.getAnonymousElementByAttribute(gURLBar.inputBox,
				'anonid','input-box-contextmenu').openPopup(null,1,e.clientX+1,e.clientY+1,true,true),20)
			e.preventDefault()
			e.stopPropagation()
		}else{
			var isSel=this.anchorOffset!=this.focusOffset || cursorMode
			var state=this.state
			var cls=e.originalTarget.classList
			if(isSel || (cls.contains('empty')&&state!='left')){
				this.selectFromRange();
			}else if(state=='left'){
				if(e.button==1)
					this.showProtocolSuggestions(e.originalTarget)
				else
					this.moveSelectionToInputField();
			}else if(cls.contains("protocol")){
				if(state == "bottom")
					this.selectFromElement(e.originalTarget)
				else
					this.showProtocolSuggestions(e.originalTarget)
			}else{
				this.openUri(e);
			}
		}
	},

	onMouseDown: function(e){
		e.preventDefault()
		e.stopPropagation()

		if(!this.inputField.value){
			this.moveSelectionToInputField()
			this.fixGURLBarPaddingClick=false
			return
		}
		var self = this, x, y, cursorMode, startY = e.clientY, initialClassName = this.stsegmentLayer.className

		var onMouseMove = function(e){
			x = e.clientX, y = e.clientY
		}
		var onMouseMoveInterval = function(e){
			var [o1, o2] = self.getPointOffsets(self.stsegmentLayer.firstElementChild, x, 1)
			var newFocus = self.offsetFromStart(o1, o2)

			var xR=Math.abs(cursorRect.l-x)<10
			if(self.anchorOffset == newFocus && (y < visibleRect[xR?'m':'t']  || y > visibleRect.b)  ){
				if(!cursorMode){
					self.cursor.style.display = '';
					cursorMode = true;
					self.cursor.style.left = cursorRect.l + 'px';
					self.stsegmentLayer.classList.remove('linkMode')
				}
			}else if(cursorMode){
				self.cursor.style.display = 'none';
				cursorMode = false
				self.stsegmentLayer.classList.add('linkMode')
			}

			if(newFocus==self.focusOffset)
				return
			self.focusOffset = newFocus;
			self.setInnerHTML(self.getMarkedTokenList(self.anchorOffset, self.focusOffset))
		}

		var onScrollInterval = function(){
			if(x < visibleRect.l + 4 && visibleRect.scrollL > 0){
				var delta = x - visibleRect.l - 8
				if(visibleRect.scrollL + delta < 0)
					delta = -visibleRect.scrollL
			}else if(x > visibleRect.r - 4 && visibleRect.scrollL < visibleRect.scrollW){
				var delta = x - visibleRect.r + 4
				if(visibleRect.scrollL + delta > visibleRect.scrollW)
					delta = visibleRect.scrollW - visibleRect.scrollL
			}else
				return

			cursorRect.l -=delta
			visibleRect.scrollL += delta
			dump(gURLBar.selectionManager.scrollLeft, visibleRect.scrollL)
			gURLBar.selectionManager.scrollLeft = visibleRect.scrollL
		}

		var onMouseUp = function(){
			window.removeEventListener("mousemove", onMouseMove, true);
			window.removeEventListener("mouseup", onMouseUp, true);
			clearInterval(timerId);
			clearInterval(mainTimerId);
			self.cursor.style.display = 'none'
			self.stsegmentLayer.className = initialClassName
			self.selecting = false
			self.onMouseUp(e, cursorMode)
		}


		this.state = gURLBar.selectionManager.mode
		var [o1, o2, cursorRect] = this.getPointOffsets(this.stsegmentLayer.firstElementChild, e.clientX, 2)
		this.anchorOffset = this.focusOffset = this.offsetFromStart(o1, o2)


		if(!this.cursor){
			this.cursor = this.stsegmentLayer.parentNode.appendChild(document.createElement('stcursor'))
			this.cursor.style.cssText = 'border:1px solid;display:none;position:fixed;z-index:-1;pointer-events:none'
		}
		var visibleRect = this.stsegmentLayer.parentNode.getBoundingClientRect()
dump(visibleRect.left,'*******************',this.stsegmentLayer.className)
		visibleRect = {
			m: visibleRect.top + visibleRect.height * 0.4,
			h: visibleRect.height,
			t: visibleRect.top,
			l: visibleRect.left,
			r: visibleRect.right,
			b: cursorRect.b,
			w: visibleRect.width,
			scrollW: gURLBar.selectionManager.scrollWidth,
			scrollL: gURLBar.selectionManager.scrollLeft
		}
		if(!this.linkable)
			visibleRect.m = visibleRect.b+10 // non uris are always selectable
		this.cursor.style.height = (visibleRect.h)+'px'

		this.stsegmentLayer.setCapture(false)
		window.addEventListener("mouseup", onMouseUp, true);
		window.addEventListener("mousemove", onMouseMove, true);

		if(visibleRect.scrollW >= visibleRect.w)
			var timerId = setInterval(onScrollInterval, 40);
		
		var mainTimerId = setInterval(onMouseMoveInterval, 40);
			
		//if(this.fixGURLBarPaddingClick)
		//	this.state='left'
			
		this.state=='left'||onMouseMove(e)
		
		self.selecting = true
	},
	
	getPointOffsets: function(parent, x, detail) {
    	var r = document.createRange()    
		function getRect(el, offset) {
			r.setStart(el, offset)
			r.setEnd(el, offset + 1)
			return r.getBoundingClientRect()
		}
		
		var mid, rect
		function binS(el, hi){
			var low = 0    
			while (hi > low) {
				mid = (hi + low) >> 1
				rect = getRect(el, mid)
				if (x < rect.left) {
					hi = mid
				} else if (x > rect.right) {
					low = mid + 1
				} else {
					return mid
				}
			}
            
			return mid
		}
		
		var ch = parent.childNodes
		var i = binS(parent, ch.length)
		var node = ch[i].firstChild
		var j = detail-- && binS(node, node.data.length)

		r.detach()
		
		if (x < rect.left + rect.width/2) 
			return [i, j, detail && {l:rect.left, h:rect.height, b:rect.bottom}]
		else
			return [i, j+1, detail && {l:rect.right, h:rect.height, b:rect.bottom}]
	},


	offsetFromStart: function(o1, o2) {
		var t = this.currentTokenList[o1]
		var endPos = t ? t.startPos : 0
		return  endPos + o2
	},
	
	
	
	bar:this,
	stsegmentLayer: this.stsegmentLayer,
	containerElement: this.stsegmentLayer.parentNode,
	
	get scrollWidth() {
		return (this.stsegmentLayer.clientWidth||0)
	},
	get scrollLeft() {
		return -(this.stsegmentLayer.left||0)
	},
	set scrollLeft(val) {
		dump(val, this.stsegmentLayer.clientWidth - this.containerElement.clientWidth + 20)
		if (val <= 0){
			val = 0
		} else {
			var max = this.stsegmentLayer.clientWidth - this.containerElement.clientWidth
			if (max <= 0)
				val = 0
			else if (val > max + 20)
				val = max + 20
		}
		this.stsegmentLayer.left = -val
	},


	makePretty: function(){
		this.stsegmentLayer.style.display=""

		var pstyle=this.inputField.style
		pstyle.maxWidth=
		pstyle.opacity="0"

		this.scrollLeft = this.inputField.editor.rootElement.scrollLeft;
		gURLBar.plain=false;
	},
	makePlain: function(){
		var scrollLeft = this.stsegmentLayer.scrollLeft
		this.stsegmentLayer.style.display = "none"

		var pstyle = this.inputField.style
		pstyle.maxWidth =
		pstyle.opacity = ""
		//pstyle.visibility=""

		this.inputField.editor.rootElement.scrollLeft = this.scrollLeft;
		gURLBar.plain=true
	},
	synch: function(val){
		var url=val
		if(!url){
			this.setSimpleValue()
			return true;
		}try {
			var uri = makeURI(url, null, null);
			try {
				uri = typeof uri.host != "undefined" ? uri : {};
			} catch (e) {
				uri = {};
			}
		}catch(e) {
			uri = null;
		}

		if (!uri) {
			this.setSimpleValue(url);
			return null;
		}
		this.setURL(uri, url);
		return true;
	},
	handleEvent: function(e) {
		if (this.selecting)
			return
		var oldMode = this.mode
		var r = this.containerElement.getBoundingClientRect();
		var x = e.clientX, y = e.clientY
		
		var node = this.stsegmentLayer.firstElementChild
		var [i, j, elRect] = this.getPointOffsets(node, x, 0)
		
		dump(i,j,k,node.children[i])
		return
		
		if (e.target == this.stsegmentLayer) {
			this.mode = "left"
		} else if (r.left < x && x < r.right) {
			if (x > r.right - Math.max(80, r.width / 6)) {
				this.mode = "left"
			} else {
				if (y > r.top + 3/5*r.height) {
					this.mode = "linkMode"
				} else {
					this.mode = "bottom"
				}
			}
		}
		
		if (oldMode != this.mode) {
			var cl = this.stsegmentLayer.classList
			cl.remove(oldMode)
			cl.add(this.mode)
			var cl = this.containerElement.classList
			cl.remove(oldMode)
			cl.add(this.mode)
		}
		// window.XULBrowserWindow.setOverLink(this.linkText, null);
	}

	
})]]> </field>

<field name="inputclicks"><![CDATA[({
	p: this.inputField,

	init: function() {
		this.p.addEventListener("mousedown", this, true);
		this.p.addEventListener("mouseup", this, true);
	},

	stopEvent: function(event) {
		event.stopPropagation();
		event.preventDefault()
	},

	elipsisClick: function(event) {
		if (event.button == 0) {
			var e, l, p
			p = this.p
			l = p.value.length;
			if (l != 0 && 0 == p.selectionStart && l == p.selectionEnd) {
				p.selectionStart = l
			} else {
				p.select();
			}
			this.clickCount = 0
		} else if (event.button == 2) {
			if (!gURLBar.plain) {
				gURLBar.selectionManager.makePlain()
				this.p.focus()
			}
			this.p.select()
			if (event.button == 2)
				document.getAnonymousElementByAttribute(gURLBar.inputBox, 'anonid', 'input-box-contextmenu').openPopup(null, 1, event.clientX + 1, event.clientY + 1, true, true)
		} else if (event.button == 1) {
			var toOpenWindowByURI=function(uri){
				var winEnum = Services.wm.getEnumerator("");
				while (winEnum.hasMoreElements()) {
					let win = winEnum.getNext();
					if (win.closed || win == window) {
						continue;
					}
					if (win.location.href==uri) {
						win.focus()
						return true;
					}
				}
				window.open(uri, "_blank", "chrome,extrachrome,menubar,resizable,scrollbars,status,toolbar,centerscreen");

			}
			toOpenWindowByURI('chrome://smarttext/content/options.xul')
		}
	},

	incrementClickCounter: function(reset) {
		clearTimeout(this.clickCountTimer);
		if (reset) {
			this.clickCount = 0
			return
		}
		var self = this;
		this.clickCountTimer = setTimeout(function() {
			self.clickCount = 0
		}, this.DBL_CLICK_SPEED + 100 * Math.min(this.clickCount, 3))
		this.clickCount++
	},

	handleEvent: function(event) {
		switch (event.type) {
		case "mousedown":
			if (event.button != 0) {
				this.incrementClickCounter('reset')
				return;
			}
			var p = this.p,
				l = p.value.length,
				e = event.rangeOffset;

			this.incrementClickCounter()

			var curpos = event.clientX + " " + event.clientY
			if (e == l && (this.clickCount !== 1 || curpos == this.lastPos)) {
				if (event.detail > 1) this.stopEvent(event)
				if (p.selectionStart == l && p.selectionEnd == l) {
					p.selectionStart = 0
					this.ecbc = 1
				} else if (p.selectionStart == 0 && p.selectionEnd == l) {
					p.selectionStart = e
					this.ecbc = 2
				}
			} else if (this.clickCount === 1) {
				if (event.detail > 1) {
					p.selectionStart = p.selectionEnd = e
					this.stopEvent(event)
				}
			} else if (p.selectionStart == 0 && p.selectionEnd == l) {
				this.clickCount = 0
				p.selectionStart = p.selectionEnd = e
				// this.ecbc=true
				this.stopEvent(event)
			} else if (p.selectionStart == l && p.selectionEnd == l) {
				this.clickCount = 0
				this.ecbc=true
				this.stopEvent(event)
			} else {
				if (this.clickCount === 3 && e == l)
					p.select();
				else
					this.extend(p.selectionStart,p.selectionEnd)
				this.stopEvent(event)
			}
			this.lastPos = curpos
			break;
		case "mouseup":
			//handle clicking at end
			if (event.button == 0 && this.ecbc) {
				this.p.selectionStart = (this.ecbc == 1 ? 0 : event.rangeOffset)
				this.ecbc = false
				this.clickCount = 0
			}
			break;
		}
	},

	selectAll: function(event) {
		this.p.select()
	},

	DBL_CLICK_SPEED: 400,
	clickCount: 0,
	clickCountTimer: null,

	selectGroup: function(index) {
		var url = this.p.value
		var i1 = url.indexOf("://")
		var i2 = url.indexOf("/", i1 + 3)
		var i3 = url.indexOf("?", i2 + 1)
		if (i3 < 0)
			i3 = url.length
		var i4 = url.indexOf("#", i2 + 1)
		if (i4 < 0)
			i4 = url.length

		if (index < i1) {
			this.p.setSelectionRange(0, i1);
		} else if (index < i2) {
			this.p.setSelectionRange(i1, i2);
		} else if (index < i3) {
			this.p.setSelectionRange(i2, i3);
		} else if (index < i4) {
			this.p.setSelectionRange(i3, i4);
		}
	},

	extend: function(s, e) {
		var c = "";
		var p = this.p.value;
		var index = (function(c, i)"_-: .=/&?#".indexOf(p.charAt(c), i));
		var bound = Math.min(index(s - 1) || 100, index(e) || 100) + 1;

		end = e;
		while (index(end, bound) < 0) {
			++end;
			c = p.charAt(end);
		}

		start = s - 1;
		while (index(start, bound) < 0) {
			--start;
			c = p.charAt(start);
		}
		++start;
		this.p.selectionStart = start;
		this.p.selectionEnd = end;
	}
})]]></field>

		</implementation>
    <handlers>
<handler event="focus"><![CDATA[
	//if (this.hasAttribute("focused"))
	//	return;
	//dump('--focus', this.mIgnoreFocus, this._focused, event.originalTarget)
	if (!this._focused && (event.originalTarget == this.inputField|| event.originalTarget == this)) {
		this._focused = true;
		this.inputField.focus()
		if (!this.plain){
			this.selectionManager.makePlain();
			this.inputField.select()
			this.plain=true
		}
	}
	//this.setAttribute("focused", "true");
]]></handler>
<handler event="blur"><![CDATA[
	//dump('--blur', this.mIgnoreFocus, this._focused, event.originalTarget)
	if (!this.mIgnoreFocus&&this._focused) {
		this._focused = false;
		if(this.plain){
			this.selectionManager.synch(this.inputField.value)
			this.selectionManager.makePretty()
		}
	}
]]></handler>
	</handlers>
		</binding>
</bindings>
<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>

<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
		xmlns:h="http://www.w3.org/1999/xhtml"
		title="smart-text options :)"
		onload="Init();"
		onunload='saveChanges()'
		centerscreen='true'
		>
		 <h:head><h:link rel="icon" href="chrome://smarttext/content/icon.png"/></h:head>

<prefpane flex="1">
<hbox>
	<button onclick="reloadWin()" label="reload"/>
	<shadiaglue style='display:none;-moz-binding: url("chrome://shadia/content/bindings/debug.xml#shadiaGlue");'/> 
	<spacer flex='1'/>
	<button oncommand="aWin.focus();window.focus()" label='focus'/>
	<button onclick="gModified=false;optionsToUi(initialOptions);applyStyleSheet()" label='reset'/>
</hbox>


<vbox oncommand="applyStyleSheet()" id="applyStyleSheet">
  <grid>
    <columns>
      <column flex="1"/>
      <column flex="0"/>
      <column flex="0"/>
    </columns>
    <rows flex="1" id="optionGrid">
      <row align="center">
        <label>font size</label>
        <textbox id="fontSize" type="number" value="12" onkeyup1="applyStyleSheet()"/>
        <label>px</label>
      </row>
      <row align="center">
        <label>urlbar height</label>
        <textbox id="barHeight" type="number" value="24"/>
        <label>px</label>
      </row>
      <row align="center">
        <label>status4evar integration</label>
        <hbox flex="1">
          <toolbarbutton id="progressmeter" label="progressmeter" type="checkbox" checkState="1" checked="true"/>
          <toolbarbutton id="s4e" label="urlbarStatus" type="checkbox" oncommand="resetValueAfterBind()" checkState="0"/>
        </hbox>
      </row>
      <row align="center">
        <label>arrow after domain</label>
        <radiogroup orient="horizontal" id="arrow" value="">
          <radio tooltiptext='none'/>
          <radio tooltiptext='outside of bubble'/>
          <radio tooltiptext='inside bubble'/>
          <radio tooltiptext='after each segment'/>
          <radio/>
        </radiogroup>
      </row>
      <row align="center">
        <label>bold domain</label>
        <checkbox id="boldDomain"/>
        <label/>
      </row>
      <row align="center">
        <label>bubble around domain</label>
        <radiogroup orient="horizontal" id="bubble" value="">
          <radio tooltiptext='none'/>
          <radio tooltiptext='not padded'/>
          <radio tooltiptext='padded'/>
        </radiogroup>
      </row>
    </rows>
  </grid>
  <groupbox>
    <caption label="hide"/>
    <div style="width:100%;position:relative;display:block">
      <checkbox id="HTTP" label="http://" style="display:inline"/>
      <checkbox id="go" label="go button" style="display:inline"/>
      <checkbox id="identityLabel" label="identity label" style="display:inline" checked="true"/>
      <checkbox id="ellipsis" label="ellipsis" style="display:inline"/>
    </div>
  </groupbox>
  <groupbox>
    <caption label="hide"/>
    <div style="width:100%;position:relative;display:block">
      <checkbox id="HTTP" label="http://" style="display:inline"/>
      <checkbox id="go" label="go button" style="display:inline"/>
      <checkbox id="identityLabel" label="identity label" style="display:inline" checked="true"/>
      <checkbox id="ellipsis" label="ellipsis" style="display:inline"/>
    </div>
  </groupbox>
  <!-- ***** - - >
  <menulist editable="true" preference="pref_one">
    <menupopup id="window-menu" >
      <menuitem label="http://www.google.com/search?q="/>
      <menuitem label="http://www.google.com/search?q="/>
    </menupopup>
  </menulist>
  <preferences>
    <preference id="pref_one" name="keyword.URL" type="string"/>
  </preferences>
  < !- - ***** -->
</vbox>







<hbox id="bottombox">
	<menupopup id='context'>
		<menuitem label='focus' oncommand="xblLiveEdit.update();aWin.focus()"/>
		<menuitem label='focus2' oncommand="xblLiveEdit.update();aWin.focus();window.focus()"/>
		<menuitem label='removeAndAdd' oncommand="xblLiveEdit.removeAndAdd();aWin.focus();window.focus()"/>
		<menuitem label='unregiter' oncommand="xblLiveEdit.update(false)"/>
	</menupopup>
	<button label="reload" oncommand="xblLiveEdit.update()" hidden='true' context='context'/>
	<button label="liveEditXBL" oncommand="toggleLiveXBLEditing(this)" 
	tooltiptext='reload urlbar.xml (:for developers:)' type='checkbox'/>
	<spacer flex="10"/>
	<button label="done" oncommand="window.close()//saveChanges()//"/>
</hbox>
</prefpane>

<script type="application/x-javascript"><![CDATA[
reloadWin=function(){
	if(true||window.opener&&window.opener.document){
		//window.opener.openDialog(window.location.href,'','top='+screenY+',left='+screenX);
		Services.ww.openWindow(null, window.location.href, "_blank", 
			"chrome,extrachrome,resizable," + /*"centerscreen"+*/'top=' + screenY + ',left=' + screenX,
			null).focus();
		window.close()
		return;
	}
	window.location.reload();	
}
]]></script>
<script type="application/x-javascript"><![CDATA[	
/**********************************************************************/
/**********************************************************************/
function getParserStyleSheet(){
	var pss=document.getElementById('shadia-ParserStyleSheet')
	if(!pss){
		pss=document.createElementNS('http://www.w3.org/1999/xhtml','style')
		pss.id='shadia-ParserStyleSheet'		
		document.documentElement.appendChild(pss)
		pss.sheet.disabled=true
	}
	return pss
}
//todo: charset rules
function setCSSRules(sheet, rules){
	//clear
	var n=sheet.cssRules.length
	for(var i=0; i<n; ++i)
		sheet.deleteRule(0)
	//copy
	n=rules.length
	for(var i=0; i<n; ++i)try{
		sheet.insertRule(rules[i].cssText, i)
	}catch(e){dump(rules[i].cssText,'--------------')}	
/*	//copy
	var n=rules.length
	for(var i=0; i<n; ++i)try{
		sheet.insertRule(rules[i].cssText, i)
	}catch(e){dump(rules[i].cssText,'--------------')}
	//clear
	for(var n=sheet.cssRules.length; n>i; --n)
		sheet.deleteRule(i)*/
}  

function reloadStyleSheet(styleSheet, styleCode){
	styleCode=styleCode||makeReq(styleSheet.href)
	var parser=getParserStyleSheet()
	parser.textContent=styleCode
	parser.sheet.disabled=true
	var rules=parser.sheet.cssRules

	if(styleSheet.forEach)// array
		styleSheet.forEach(function(styleSheet)setCSSRules(styleSheet, rules))
	else 
		setCSSRules(styleSheet, rules)
}

//findRuleInStyleSheet('#identity-icon-label')
function findRuleInStyleSheet(styleSheet,text){	
	function findRuleInCSSRules(cssRules){
		for(var i=0;i<cssRules.length;i++){
			var rule=cssRules[i]
			if(rule.type===1){				
				if(rule.selectorText.indexOf(text)>-1) return rule
			}else if(rule.cssRules){
				rule=findRuleInCSSRules(rule.cssRules)
				if(rule) return rule
			}
		}
		return;
	}
	return findRuleInCSSRules(styleSheet.cssRules)
}

findStyleSheetByUri = function(aWinOrEl, href) {
	if(getClass(aWinOrEl).indexOf('window')==-1) {//find stylesheet by element
		var domUtils=Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils)
		var inspectedRules=domUtils.getCSSStyleRules(aWinOrEl)
		for (var i = 0; i < inspectedRules.Count(); ++i){
			var rule = inspectedRules.GetElementAt(i) 
			if(rule.parentStyleSheet.href.indexOf(href)>-1){
				return rule.parentStyleSheet
			}
		}
	} else {
		var ss = aWinOrEl.document.styleSheets;
		for (var i = ss.length - 1; i >= 0; i--){
		   var ahref=ss[i].href
		   if (ahref&& ahref.indexOf(href)>-1) 
				return ss[i]    
		}
	}
}

function getClass(x) Object.prototype.toString.call(x).slice(8, -1);


findStyleSheetByCss = function(element,descriptiveCss){
	var domUtils=Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils)
	var inspectedRules=domUtils.getCSSStyleRules(element)
	for (var i = 0; i < inspectedRules.Count(); ++i){
		var rule = inspectedRules.GetElementAt(i) 
		if(rule.cssText.indexOf(binding2)>0||rule.cssText.indexOf(bindingce)>0){
			var s=rule.parentStyleSheet
			return s
		}
	}
}
/**********************************************************************/
/**********************************************************************/

Components.utils.import("resource://gre/modules/Services.jsm");


var styleURI="chrome://smarttext/content/urlbar.css";
window.__defineGetter__('aWin', function(){	
	return Services.wm.getMostRecentWindow('navigator:browser')
})

function Init() {	
	if(aWin) {
	}else{
		var bu=document.createElement("button")
		bu.setAttribute("onclick","this.parentNode.removeChild(this);Init()")
		bu.setAttribute("label","no browser windows detected, try opening one")
		document.documentElement.appendChild(bu)
		return;
	}
	
	//addCheckboxes(gConfig)
	optionsToUi(options)
	fixURLBarDisplay(true)	
}
/** dom helpers*/
$=function(id){
	return document.getElementById(id)
}
function appendXML(element, xml){
	var range = document.createRange()
	range.selectNode(element)
	range.collapse(true)
	var fragment = range.createContextualFragment(xml)

	element.appendChild(fragment)
}
formatString = function(string, options){	
	return string.replace(/\$[^\$]*\$/g, function(x){
		return options[x.slice(1,-1)]
	})
}
addCheckboxes=function(config){
	var xmlFrag = <row align="center">
				<label>$descr$</label>
				<checkbox id="$id$" /><label> </label>
			</row>.toXMLString()
	var xmlFrag2 = <row align="center">
				<label>$descr$</label>
				<radiogroup orient="horizontal" id="$id$">
					$content$
				</radiogroup>
			</row>.toXMLString()
	var chFrag = <checkbox id="$0$" label="$1$" style='display:inline'/>.toXMLString()
	var div = "<div style='width:100%;position:relative;display:block'>"
	var optionGridXML = [], checkboxListXML=[]
	
	gConfig.forEach(function(x){
		if(x.builder)
			optionGridXML.push(x.builder())
		else if(x.type=='number')
			return
		else if(x.type=='checkbox')		
			optionGridXML.push(formatString(xmlFrag, x))
		else if(x.type=='checkboxList'){
			var ans=['<groupbox><caption label="'+x.descr+'"/>',div]
			for(var i in x.subs)
				ans.push(formatString(chFrag, [i, x.subs[i]]))
			ans.push('</div></groupbox>')
			checkboxListXML.push(ans.join(''))
		}else if(x.type=='radiogroup'){			
			x.content=Array(x.len+1).join('<radio></radio>')
			ui=x
			optionGridXML.push(formatString(xmlFrag2, x))
		}
	})
	appendXML($('optionGrid'), optionGridXML.join(''))
	appendXML($('applyStyleSheet'), checkboxListXML.join(''))
}
function toolbarbuttonList(){
	var xmlFrag = <row align="center">
			<label>status4evar integration</label>
			<hbox flex='1'>
				<toolbarbutton id="progressmeter" label='progressmeter' type='checkbox'/>
				<toolbarbutton id="s4e" label='urlbarStatus' type='checkbox' oncommand='resetValueAfterBind()'/>
			</hbox>
		</row>.toXMLString()
	return xmlFrag
}

/**/
gConfig = [
	{id:'fontSize', descr: '', type: 'number'},
	{id:'barHeight', descr: '', type: 'number'},//TODO
	{id:'progressmeter', descr: "progressmeter", type: 'checkbox', builder:function(){}},
	{id:'s4e', descr: 'urlbarStatus', type: 'checkbox', builder: toolbarbuttonList},
	{id:'arrow', descr: 'arrow after domain', len:5, type: 'radiogroup'},
	{id:'boldDomain', descr: 'bold domain', type: 'checkbox'},
	{id:'bubble', descr: 'bubble around domain', len:3, type: 'radiogroup'},
	{id:'hide', descr: 'hide', subs: {
		HTTP: 'http://',
		go: 'go button',
		identityLabel: 'identity label',
		ellipsis: 'ellipsis'
	}, type: 'checkboxList'},
]
optionsFromUi = function(options){
	gConfig.forEach(function(x){
		if(x.type=='number')
			options[x.id] = parseInt($(x.id).value)
		else if(x.type=='checkbox')		
			options[x.id] = $(x.id).checked
		else if(x.type=='checkboxList'){
			var ans=[]
			for(var i in x.subs)
				if($(i).checked)
					ans.push(i)
			options[x.id] = ans.length? ans: null
		}else if(x.type=='radiogroup')
			options[x.id] = $(x.id).selectedIndex
	})
	
	options.lineHeight = Math.ceil( options.fontSize*1.2 )	
	if(options.barHeight < options.lineHeight)
		options.barHeight = options.lineHeight
	
	options.padding=(options.barHeight-options.lineHeight)/2;
	if(options.padding-Math.floor(options.padding)>0){
		options.lineHeight--;
		options.padding=(options.barHeight-options.lineHeight)/2;
	}
	
}
optionsToUi = function(options){
	gConfig.forEach(function(x){
		if(x.type=='number')
			$(x.id).value = options[x.id]
		else if(x.type=='checkbox')		
			$(x.id).checked = options[x.id]
		else if(x.type=='checkboxList'){
			var ans=options[x.id]||[]
			for(var i in x.subs)
				$(i).checked=ans.indexOf(i)>-1
		}else if(x.type=='radiogroup')
			$(x.id).selectedIndex = options[x.id]||0
	})
}



/** ---------------------------------------**\
 |                *  *  *                   |
 |               * * * * *                  |
 |                *  *  *                   |
\**----------------------------------------**/

gModified = false

/*
apllyStyleSheet=function(){
	optionsFromUi(options)
	var styleCode = compileCss(options)
	
	//apply stylesheet changes to all windows
	var styleSheets=[]
	var fWins = Services.wm.getEnumerator('navigator:browser');
	while(fWins.hasMoreElements()){
		var activeStylesheet = findStyleSheetByUri(fWins.getNext(), styleURI)
		styleSheets.push()
	}
	reloadStyleSheet(styleSheets, styleCode)
}
*/

applyStyleSheet=function(styleCode){
	gModified = true
	optionsFromUi(options)
	var styleCode = compileCss(options)
	UAstyleSheet = findStyleSheetByUri(aWin.gURLBar, xblLiveEdit.active?
										xblLiveEdit.getCssFileHref(): window.cssFileHref)
	reloadStyleSheet(UAstyleSheet, styleCode)

	//force redraw
	var fWins = Services.wm.getEnumerator('navigator:browser');
	while(fWins.hasMoreElements()){		
		var sh=fWins.getNext().document.styleSheets[0]
		sh.deleteRule(
			sh.insertRule('*{}',sh.cssRules.length)
		)
	}
}



saveChanges=function(){
	if(xblLiveEdit.active)
		xblLiveEdit.finish()
	else if(gModified)
		save()
	
	fixURLBarDisplay(false)
}

/**urlbar is hidden for about:addons**/
fixURLBarDisplay = function(init){
	var br
	if(window.opener && (br = aWin)){
		if(init)
			br.document.documentElement.removeAttribute("disablechrome");
		else if(br.XULBrowserWindow.hideChromeForLocation(br.content.location.href))
			br.document.documentElement.setAttribute("disablechrome", "true");		
	}
}
]]></script>

<script src='options.js'/>

<script type="application/x-javascript"><![CDATA[
/**************************************\     //***************************************
 **       * *    * **  ** ** ** *       \   //       ** *** ***  *** ** ***        **
 * *     *   *  * **    ** ** ****       \ //       ** * ** **    **** * ***      * *
 *  * * * * * * * * * * * * * * * *       V/       * * * * * * * * * * * * * * * *  */
var toggleLiveXBLEditing=function(button){	
	if(xblLiveEdit.active){
		button.previousSibling.hidden=true
		xblLiveEdit.finish()		
	}else{
		button.previousSibling.hidden=false
		xblLiveEdit.update()
		//aWin.restore()
		//focus()
	}
}
var xblLiveEdit = (function(){
	var ios = Cc["@mozilla.org/network/io-service;1"].getService(Ci.nsIIOService)
	var sss = Cc["@mozilla.org/content/style-sheet-service;1"].getService(Ci.nsIStyleSheetService)
	var rootPath = 'chrome://smarttext/content/'
	var bindingPath = rootPath+'urlbar.xml'
	var activeURI = cssFileURI
	var rr=Math.random()
	function updateStyle(register, useDataURI){		
		var a=sss.AGENT_SHEET
		
		if(sss.sheetRegistered (activeURI,a))
			sss.unregisterSheet(activeURI,a)
		if(register){
			activeURI = useDataURI? ios.newURI(getData(true), null, null) :cssFileURI;
			sss.loadAndRegisterSheet(activeURI,a)
		}
	}
	function getData(useDataURI){
		prepareCss()
		var css = compileCss(options)		
		 
		/*var binding = makeReq(bindingPath)
		var binding = "data:text/xml" + ";base64," + btoa(binding);
		var text = css.replace( bindingPath+bindingIndex, binding )*/
		
		var text = css.replace( 
			/chrome:\/\/smarttext\/content\/[^#]*/,
			function(a) a+'?version='+(rr++) 
		)
		
		if(!useDataURI)
			return text
		else 
			return "data:text/xml" + ";base64," + btoa(text);
	}
	
	function removeAndAdd(el){
		var p=el.parentNode,ns=el.nextSibling;
		p.removeChild(el)
		ns?p.insertBefore(el,ns):p.appendChild(el)
	}
	
	return {
		update: function(unregister){
			updateStyle(unregister==undefined||unregister, true)
			this.active = true
			resetValueAfterBind()
		},
		finish: function(){
			updateStyle(true, false)
			this.active = false
			save()			
			/*this.activeWindow.activator.shutdown()
			this.activeWindow = null*/
		},
		getCssFileHref: function()activeURI.spec,
		removeAndAdd: function()removeAndAdd(aWin.gURLBar)
	}
})()
var afterBindTimer
function resetValueAfterBind(){
	clearTimeout(afterBindTimer)
	afterBindTimer = setTimeout(function(){ with(aWin){
		gURLBar.value=gBrowser.userTypedValue||gBrowser.mCurrentBrowser.lastURI.spec				
	}}, 50)
}

/*
addActivatorToWindow = function(window){	
	window.activator=window.activator||{
		initialize:function(){
			window.addEventListener('activate', this, false)
		},
		shutdown:function(){
			window.removeEventListener('activate', this, false)
		},
		handleEvent: function(e){
			this[e.type].forEach(function(x)x(e))	
		},
		activate: []
	}
	window.activator.activate=[function(){
		xblLiveEdit.update()
	}]
	window.activator.initialize()
}*/

//document.documentElement.setAttribute("disablechrome", "true");
//       document.documentElement.removeAttribute("disablechrome");
]]></script>



</window>
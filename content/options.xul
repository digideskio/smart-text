<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>

<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
		xmlns:h="http://www.w3.org/1999/xhtml"
		title="smart-text options :)"
		onload="Init();"
		onunload='saveChanges()'
		centerscreen='true'
		>
		 <h:head><h:link rel="icon" href="chrome://smarttext/content/icon.png"/></h:head>

<prefpane id="locationbar2">
<hbox>
	<button flex='1' onclick="reloadWin()">reload</button>
	<button flex='1' onclick="gModified=false;optionsToUi(initialOptions);applyStyleSheet()">reset</button>
</hbox>
<grid tooltiptext="configure appearence of urlbar">
<columns>
	<column flex="1"/>
	<column flex="0"/>
	<column flex="0"/>
</columns>
<rows flex="1" id="optionGrid">
	<row align="center">
		<label>font size</label>
		<textbox id="fontSize" type="number" value="12" oncommand="applyStyleSheet()" onkeyup1='applyStyleSheet()'/><label>px</label>
	</row>
	<row align="center">
		<label>urlbar height</label>
		<textbox id="barHeight" type="number" value="24" oncommand="applyStyleSheet()"/><label>px</label>
	</row>

	
</rows>
</grid>
	
	





<hbox>
	<button label="liveXBLEdit" oncommand="toggleLiveXBLEditing()" type='checkbox'/>
	<spacer flex="10"/>
	<button label="save" oncommand="window.close()"/>
</hbox>
</prefpane>

<script type="application/x-javascript"><![CDATA[
reloadWin=function(){
	if(window.opener&&window.opener.document){
		window.opener.openDialog(window.location.href,'','top='+screenY+',left='+screenX);
		window.close()
		return;
	}
	window.location.reload();	
}
]]></script>
<script type="application/x-javascript"><![CDATA[	
/**********************************************************************/
function getParserStyleSheet(){
	var pss=document.getElementById('shadia-ParserStyleSheet')
	if(!pss){
		pss=document.createElementNS('http://www.w3.org/1999/xhtml','style')
		pss.id='shadia-ParserStyleSheet'		
		document.documentElement.appendChild(pss)
		pss.sheet.disabled=true
	}
	return pss
}
//todo: charset rules
function setCSSRules(sheet, rules){
	var n=sheet.cssRules.length
	//clear
	for(var i=0; i<n; ++i)
		sheet.deleteRule(0)
	//copy
	n=rules.length
	for(var i=0; i<n; ++i)try{
		sheet.insertRule(rules[i].cssText, i)
	}catch(e){dump(rules[i].cssText,'--------------')}
}  

function reloadStyleSheet(styleSheet, styleCode){
	styleCode=styleCode||makeReq(styleSheet.href)
	var parser=getParserStyleSheet()
	parser.textContent=styleCode
	parser.sheet.disabled=true
	var rules=parser.sheet.cssRules

	if(styleSheet.forEach)// array
		styleSheet.forEach(function(styleSheet)setCSSRules(styleSheet, rules))
	else 
		setCSSRules(styleSheet, rules)
}

//findRuleInStyleSheet('#identity-icon-label')
function findRuleInStyleSheet(styleSheet,text){	
	function findRuleInCSSRules(cssRules){
		for(var i=0;i<cssRules.length;i++){
			var rule=cssRules[i]
			if(rule.type===1){				
				if(rule.selectorText.indexOf(text)>-1) return rule
			}else if(rule.cssRules){
				rule=findRuleInCSSRules(rule.cssRules)
				if(rule) return rule
			}
		}
		return;
	}
	return findRuleInCSSRules(styleSheet.cssRules)
}

findStyleSheetByUri = function(awin, href) {
	if(getClass(awin).indexOf('window')==-1) {//find stylesheet by element
		var domUtils=Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils)
		var inspectedRules=domUtils.getCSSStyleRules(awin)
		for (var i = 0; i < inspectedRules.Count(); ++i){
			var rule = inspectedRules.GetElementAt(i) 
			if(rule.parentStyleSheet.href.indexOf(href)>-1){
				return rule.parentStyleSheet
			}
		}
	} else {
		var ss = awin.document.styleSheets;
		for (var i = ss.length - 1; i >= 0; i--){
		   var ahref=ss[i].href
		   if (ahref&& ahref.indexOf(href)>-1) 
				return ss[i]    
		}
	}
}

function getClass(x) Object.prototype.toString.call(x).slice(8, -1);


findStyleSheetByCss = function(element,descriptiveCss){
	var domUtils=Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils)
	var inspectedRules=domUtils.getCSSStyleRules(element)
	for (var i = 0; i < inspectedRules.Count(); ++i){
		var rule = inspectedRules.GetElementAt(i) 
		if(rule.cssText.indexOf(binding2)>0||rule.cssText.indexOf(bindingce)>0){
			var s=rule.parentStyleSheet
			return s
		}
	}
}
/**********************************************************************/

Components.utils.import("resource://gre/modules/Services.jsm");


var styleURI="chrome://smarttext/content/urlbar.css";
window.__defineGetter__('aWin', function(){	
	return Services.wm.getMostRecentWindow('navigator:browser')
})
/**smart text specific*/
function Init() {
	
	if(aWin) {			
		
	}else{
		var bu=document.createElement("button")
		bu.setAttribute("onclick","this.parentNode.removeChild(this);Init()")
		bu.setAttribute("label","no browser windows detected, try opening one")
		document.documentElement.appendChild(bu)
		return;
	}

	addCheckboxes(gConfig)
	optionsToUi(options)
}
/** dom helpers*/
$=function(id){
	return document.getElementById(id)
}
function appendXML(element, xml){
	var range = document.createRange()
	dump(range,element, xml)
	range.selectNode(element)
	range.collapse(true)
	var fragment = range.createContextualFragment(xml)

	element.appendChild(fragment)
}
formatString = function(string, options){	
	return string.replace(/\$[^\$]*\$/g, function(x){
		return options[x.slice(1,-1)]
	})
}
addCheckboxes=function(config){
	var xmlFrag = <row align="center">
				<label>$descr$</label>
				<checkbox id="$id$" oncommand="applyStyleSheet()"/><label> </label>
			</row>.toXMLString()
	
	var xml = config.map(function(x){
		if(x.type !='checkbox')
			return
		return formatString(xmlFrag, x)
	})
	appendXML($('optionGrid'), xml.join(''))
}
/**/
gConfig = [
	{id:'fontSize', descr: '', type: 'number'},
	{id:'barHeight', descr: '', type: 'number'},//TODO
	{id:'hideIdentityLabel', descr: 'hide identity label', type: 'checkbox'},
	{id:'progressmeter', descr: 'progressmeter background', type: 'checkbox'},
	{id:'boldDomain', descr: 'bold domain', type: 'checkbox'},
	{id:'hideHTTP', descr: 'hide "http://"', type: 'checkbox'},
]
optionsFromUi = function(options){
	gConfig.forEach(function(x){
		options[x.id] = $(x.id)[x.type=='checkbox'?'checked':'value']
		if(x.type=='number')
			options[x.id] = parseInt(options[x.id])
	})
	
	options.lineHeight = Math.ceil( options.fontSize*1.2 )	
	if(options.barHeight < options.lineHeight)
		options.barHeight = options.lineHeight
	
	options.padding=(options.barHeight-options.lineHeight)/2;
	if(options.padding-Math.floor(options.padding)>0){
		options.lineHeight--;
		options.padding=(options.barHeight-options.lineHeight)/2;
	}
	
}
optionsToUi = function(options){
	gConfig.forEach(function(x){
		$(x.id)[x.type=='checkbox'?'checked':'value'] = options[x.id]
	})
}



/** ---------------------------------------**\
 |                *  *  *                   |
 |               * * * * *                  |
 |                *  *  *                   |
\**----------------------------------------**/

gModified = false

/*
apllyStyleSheet=function(){
	optionsFromUi(options)
	var styleCode = compileCss(options)
	
	//apply stylesheet changes to all windows
	var styleSheets=[]
	var fWins = Services.wm.getEnumerator('navigator:browser');
	while(fWins.hasMoreElements()){
		var activeStylesheet = findStyleSheetByUri(fWins.getNext(), styleURI)
		styleSheets.push()
	}
	reloadStyleSheet(styleSheets, styleCode)
}
*/

applyStyleSheet=function(styleCode){
	gModified = true
	optionsFromUi(options)
	var styleCode = compileCss(options)
	UAstyleSheet = findStyleSheetByUri(aWin.gURLBar, cssFileHref)
	reloadStyleSheet(UAstyleSheet, styleCode)

	//force redraw
	var fWins = Services.wm.getEnumerator('navigator:browser');
	while(fWins.hasMoreElements()){		
		var sh=fWins.getNext().document.styleSheets[0]
		sh.deleteRule(
			sh.insertRule('*{}',sh.cssRules.length)
		)
	}
}



saveChanges=function(){
	if(xblLiveEdit.activeWindow)
		xblLiveEdit.finish()
	else if(gModified)
		save()
}

/***/

]]></script>


<script src='options.js'/>


<script type="application/x-javascript"><![CDATA[
/**************************************\     //****************************************
 *         **********  **********       \   //
 *        **********    **********       \ //
 * ********************************       V/    */
toggleLiveXBLEditing=function(){
	xblLiveEdit.update()
	/*if(xblLiveEdit.activeWindow)
		xblLiveEdit.finish()		
	else{
		xblLiveEdit.activeWindow = aWin
		addActivatorToWindow(xblLiveEdit.activeWindow)
		xblLiveEdit.activeWindow.focus()
	}*/
}
var xblLiveEdit = (function(){
	var ios = Cc["@mozilla.org/network/io-service;1"].getService(Ci.nsIIOService)
	var sss = Cc["@mozilla.org/content/style-sheet-service;1"].getService(Ci.nsIStyleSheetService)
	var rootPath = 'chrome://smarttext/content/'	
	var activeURI = cssFileURI
	
	function updateStyle(register, useDataURI){		
		var a=sss.AGENT_SHEET
		
		if(sss.sheetRegistered (activeURI,a))
			sss.unregisterSheet(activeURI,a)
		if(register){
			activeURI = useDataURI? ios.newURI(getData(true), null, null) :cssFileURI;
			sss.loadAndRegisterSheet(activeURI,a)
		}
	}
	function getData(useDataURI){
		var binding = makeReq(rootPath+'urlbar.xml')
		var css = compileCss(options)
		
		var binding = "data:text/xml" + ";base64," + btoa(binding);
		var text = css.replace( 'chrome://smarttext/content/urlbar.xml#urlbar', binding )
		if(!useDataURI)
			return text
		else 
			return "data:text/xml" + ";base64," + btoa(text);
	}
	
	return {
		update: function(){
			updateStyle(true, true)
		},
		finish: function(){
			updateStyle(true, false)
			save()
			/*this.activeWindow.activator.shutdown()
			this.activeWindow = null*/
		}
	}
})()
addActivatorToWindow = function(window){	
	/*window.activator=window.activator||{
		initialize:function(){
			window.addEventListener('activate', this, false)
		},
		shutdown:function(){
			window.removeEventListener('activate', this, false)
		},
		handleEvent: function(e){
			this[e.type].forEach(function(x)x(e))	
		},
		activate: []
	}
	window.activator.activate=[function(){
		xblLiveEdit.update()
	}]
	window.activator.initialize()*/
}
]]></script>



</window>
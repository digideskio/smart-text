<?xml version="1.0" encoding="UTF-8"?>
<bindings id="status4evar-bindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

	<binding id="urlbar" extends="chrome://smarttext/content/urlbar.xml#urlbar">

		<content sizetopopup="pref" >
			<xul:hbox class="autocomplete-textbox-container urlbar-textbox-container" flex="1">
				<children includes="image|deck|stack|box">
					<xul:image class="autocomplete-icon" allowevents="true"/>
				</children>

<xul:stack flex="1" anonid="stack" class="urlbar-stack1">
	<xul:vbox class="urlbar-progress-layer" xbl:inherits="pack=pmpack" flex="1">
		<children includes="progressmeter"/>
	</xul:vbox>
	<xul:scrollbox anonid="over-link-layer" class="urlbar-over-link-layer" xbl:inherits="overlinkstate" flex="1">
		<xul:hbox anonid="over-origin-box" class="urlbar-over-origin-box" xbl:inherits="overlinkstate" align="center" flex="1">
			<xul:label anonid="origin-label" class="urlbar-origin-label" flex="1" crop="end"/>
		</xul:hbox>

	</xul:scrollbox>
<xul:hbox flex="1">	
<xul:hbox flex="1" class="st-layers" xbl:inherits="focused,overlinkstate">
	<xul:vbox flex="1" anonid="textbox-input-box" class="textbox-input-box plain " align="stretch">
	   <xul:vbox anonid="textbox-input-box-inner" xbl:inherits="tooltiptext=inputtooltiptext"
				 flex="1" >
			<html:input anonid="input" class="autocomplete-textbox textbox-input smart-text-input" style="cursor:inherit"
						flex="1" allowevents="true"
						xbl:inherits="tooltiptext=inputtooltiptext,onfocus,onblur,value,type,maxlength,disabled,size,readonly,userAction"/>
		</xul:vbox>
	</xul:vbox>

	<html:hbox  anonid="stsegment-layer" class="smart-text" flex="1"  style="display:none;"
		ondragover="gURLBar.layerManager.makePlain()"  ondragexit="nsDragAndDrop.dragExit(event, gURLBar);"/>


	<xul:box anonid="overflow-ellipsis" class="smart-text-ellipsis" onclick="gURLBar.inputclicks.elipsisClick(event);"
				style="-moz-user-select:none;-moz-box-align:center" ><html:div>...</html:div></xul:box>

		<xul:hbox anonid="over-link-box" class="urlbar-over-link-box" xbl:inherits="overlinkstate" align="center">
			<xul:label anonid="over-link-host-label" class="urlbar-over-link-host-label"/>
			<xul:label anonid="over-link-path-label" class="urlbar-over-link-path-label" flex="1"/>
		</xul:hbox>
</xul:hbox>
</xul:hbox>

<xul:hbox flex="1" style='pointer-events:none' class="elipsis-mask" >
	<xul:vbox flex='1' class='f' >
		<xul:vbox  flex='3' style='pointer-events:auto'/>
		<xul:vbox  flex='5' style='pointer-events:auto'/>
	</xul:vbox>
	<xul:hbox style='pointer-events:auto;min-width:80px'/>
</xul:hbox>



</xul:stack>


<children includes="hbox"/>

			</xul:hbox>
			<xul:dropmarker anonid="historydropmarker" class="autocomplete-history-dropmarker urlbar-history-dropmarker" allowevents="true" xbl:inherits="open,enablehistory"/>
			<children/>
			<xul:popupset anonid="popupset" class="autocomplete-result-popupset"/>
		</content>
		
	

<!--	
					<xul:vbox class="urlbar-progress-layer" xbl:inherits="pack=pmpack" flex="1">
						<children includes="progressmeter"/>
					</xul:vbox>


			
-->
		<implementation>
			<constructor><![CDATA[
				this._overLinkBox.addEventListener("transitionend", this, false);
			]]></constructor>

			<destructor><![CDATA[
				this._overLinkBox.removeEventListener("transitionend", this, false);
			]]></destructor>

			<field name="_overLinkLayer" readonly="true"><![CDATA[
				document.getAnonymousElementByAttribute(this, "anonid", "over-link-layer");
			]]></field>

			<field name="_overOriginBox" readonly="true"><![CDATA[
				document.getAnonymousElementByAttribute(this, "anonid", "over-origin-box");
			]]></field>

			<field name="_originLabel" readonly="true"><![CDATA[
				document.getAnonymousElementByAttribute(this, "anonid", "origin-label");
			]]></field>

			<field name="_overLinkBox" readonly="true"><![CDATA[
				document.getAnonymousElementByAttribute(this, "anonid", "over-link-box");
			]]></field>

			<field name="_overLinkHostLabel" readonly="true"><![CDATA[
				document.getAnonymousElementByAttribute(this, "anonid", "over-link-host-label");
			]]></field>

			<field name="_overLinkPathLabel" readonly="true"><![CDATA[
				document.getAnonymousElementByAttribute(this, "anonid", "over-link-path-label");
			]]></field>

			<field name="_overLinkHostValue"><![CDATA[
				null
			]]></field>

			<field name="_overLinkPathValue"><![CDATA[
				null
			]]></field>

			<field name="s4espos"><![CDATA[
				66
			]]></field>

			<property name="s4esalign">
				<setter><![CDATA[
					this.setAttribute("s4esalign", val);
					return val;
				]]></setter>
				<getter><![CDATA[
					return this.getAttribute("s4esalign");
				]]></getter>
			</property>

			<method name="handleEvent">
				<parameter name="aEvent"/>
				<body><![CDATA[
					switch (aEvent.type)
					{
						case "transitionend":
							if(aEvent.target == this._overLinkBox
							   && aEvent.propertyName == "opacity")
							{
								this._overLinkTransitioning = false;
							}
							break;
						default:
							this.__proto__.__proto__.handleEvent.call(this, aEvent);
							break;
					}
				]]></body>
			</method>

			<method name="onBeforeValueSet">
				<parameter name="aValue"/>
				<body><![CDATA[
					//this._hideOverLink();
					var action = this._parseActionUrl(aValue);
					this._originLabel.value = (action ? action.param : aValue) || "";

					return this.__proto__.__proto__.onBeforeValueSet.call(this, aValue);
				]]></body>
			</method>

			<method name="setStatusType">
				<parameter name="aValue"/>
				<body><![CDATA[
					var overLinkBox = this._overLinkBox;
					overLinkBox.setAttribute("previoustype", overLinkBox.getAttribute("type"));
					overLinkBox.setAttribute("type", aValue);
				]]></body>
			</method>

			<method name="setStatus">
				<parameter name="aURL"/>
				<body><![CDATA[
					// NOTE: This method is called many times in a row very quickly when
					// the user mouses over a bookmarks menu, tabs menu, or long list of
					// links in a page, or leaves the cursor over a page with many links
					// while scrolling.  Therefore it's important that it be fast.  Don't
					// regress performance when you modify it!

					// Hide the over-link immediately if necessary.
					if((!aURL && (XULBrowserWindow.hideOverLinkImmediately
					   || this._hideOverLinkImmediately)) || this.focused)
					{
						this._setOverLinkState(null);
						return;
					}

					if(aURL)
					{
						this._updateOverLink(aURL);
						if(this._overLinkTransitioning)
						{
							this._setOverLinkState("showing");
						}
						else
						{
							this._setOverLinkState("fade-in");
						}
					}
					else
					{
						this._setOverLinkState("fade-out");
					}
				]]></body>
			</method>

			<method name="_hideOverLink">
				<body><![CDATA[
					this._hideOverLinkImmediately = true;
					this.setStatus("");
					this._hideOverLinkImmediately = false;
				]]></body>
			</method>

			<method name="_setOverLinkState">
				<parameter name="aVal"/>
				<body><![CDATA[
					switch(aVal)
					{
						case "fade-in":
							var style = window.getComputedStyle(this._overLinkBox);
							this._overLinkTransitioning = style.opacity != 1;
							this.setAttribute("overlinkstate", aVal);
							break;
						case "fade-out":
							style = window.getComputedStyle(this._overLinkBox);
							this._overLinkTransitioning = style.opacity != 0;
							this.setAttribute("overlinkstate", aVal);
							break;
						case "showing":
							this._overLinkTransitioning = false;
							this.setAttribute("overlinkstate", aVal);
							break;
						default:
							this._overLinkTransitioning = false;
							this.removeAttribute("overlinkstate");
							break;
					}
				]]></body>
			</method>

			<method name="_updateOverLink">
				<parameter name="aURL"/>
				<body><![CDATA[
					// Determine the pre-path and path of the over-link.  Include the
					// path's leading slash in the pre-path so that if the path is
					// truncated its leading slash is visible.
					var re = new RegExp("^([a-z0-9+.-]+://[^/]+/)(.*)$");
					var match = re.exec(aURL);
					this._overLinkHostValue = match ? match[1] : "";
					this._overLinkPathValue = match ? match[2] : aURL;

					this.updateOverLinkLayout();
				]]></body>
			</method>

			<method name="updateOverLinkLayout">
				<body><![CDATA[
					// Reset the overlay state
					var overLinkHost = this._overLinkHostLabel;
					overLinkHost.value = "";
					overLinkHost.flex = 0;
					overLinkHost.crop = "none";

					var overLinkPath = this._overLinkPathLabel;
					overLinkPath.value = "";
					overLinkPath.crop = "none";

					var overLinkBox = this._overLinkBox;
					overLinkBox.maxWidth = "";
					overLinkBox.minWidth = "";

					// Calculate the max-width
					var maxWidth = this._overLinkLayer.boxObject.width;
					var alignMode = this.s4esalign;
					if(alignMode != "left")
					{
						maxWidth *= (this.s4espos / 100);
					}

					// Do eet!
					overLinkHost.value = this._overLinkHostValue;
					overLinkPath.value = this._overLinkPathValue;
					overLinkPath.crop = this._overLinkHostValue ? "start" : "end";

					if(overLinkHost.boxObject.width > maxWidth)
					{
						overLinkHost.flex = 1;
						overLinkHost.crop = "end";
					}

					overLinkBox.maxWidth = maxWidth;
					if(alignMode == "absolute")
					{
						overLinkBox.minWidth = maxWidth;
					}

					var action = this._parseActionUrl(this._value);
					this._originLabel.value = (action ? action.param : this._value) || "";
				]]></body>
			</method>
		</implementation>

		<handlers>
			<handler event="focus" phase="capturing"><![CDATA[
				this._hideOverLink();
			]]></handler>
		</handlers>
	</binding>


</bindings>

